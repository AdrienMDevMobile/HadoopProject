import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.MapWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import java.io.IOException;
import java.util.StringTokenizer;

public class Graphe {

    /* KEYIN : LongWritable : numéro de ligne
    VALUEIN : La ligne
    KEYOUT :
    */
    public static class MapGraph extends Mapper<LongWritable, Text, IntWritable, MapWritable> {

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            /* Tokenizer = outil pour séparer les valeurs au sein de la ligne */
            StringTokenizer tokenizer = new StringTokenizer(line, ",");

            int compteur = 0;
            while (tokenizer.hasMoreTokens()) {

                MapWritable mapWritable = new MapWritable();

                Text word = new Text();
                word.set(tokenizer.nextToken());

                mapWritable.put(key, word);


                context.write(new IntWritable(compteur), mapWritable);

                compteur = compteur + 1;
            }
        }
    }


    public static class ReducGraph extends Reducer<IntWritable, Text, IntWritable, MapWritable> {

        public void reduce(IntWritable key, Iterable<MapWritable> values, Context context) throws IOException, InterruptedException {

            MapWritable concat = new MapWritable();




            for(MapWritable mwVal : values){
                concat.putAll(mwVal);
            }

            context.write(key, concat);

            /*

            String concat = "";
            int i = 0;

            for (Text val : values) {
                if (i != 0)
                    concat += " , ";

                concat += val.toString();
                i = i+1;
            }
            context.write(key, new Text(concat)); */
        }

    }


    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();

        Job job = new Job(conf, "wordcount");
        job.setJarByClass(WordCount.class);
        job.setOutputKeyClass(IntWritable.class);
        /* job.setOutputValueClass(Text.class); */
        job.setOutputValueClass(MapWritable.class);

        job.setMapperClass(MapGraph.class);
        job.setReducerClass(ReducGraph.class);

        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        job.waitForCompletion(true);
    }

}


